from __future__ import print_function
import sys
import numpy as np
import gzip
import popgen_scripts.pgstats as pg


def bootstrap(data1, num_samples, stat, alpha, data2=None):
    """Returns bootstrap estimate of 100.0*(1-alpha) CI for statistic."""

    n = len(data1)
    data1_array = np.array(data1)
    idx = np.random.randint(0, n, (num_samples, n))
    samples1 = data1_array[idx]

    stat1 = np.sort(stat(samples1, 1))
    conf_int_stat1 = (round(stat1[int((alpha/2.0)*num_samples)], 6), round(stat1[int((1-alpha/2.0)*num_samples)], 6))

    if data2 is not None:
        data2_array = np.array(data2)
        samples2 = data2_array[idx]
        stat2 = np.sort(stat(samples2, 1))

        ratio = stat1 / stat2

        conf_int_stat2 = (round(stat2[int((alpha/2.0)*num_samples)], 6), round(stat2[int((1-alpha/2.0)*num_samples)],
                                                                               6))
        conf_int_ratio = (round(ratio[int((alpha/2.0)*num_samples)], 6), round(ratio[int((1-alpha/2.0)*num_samples)],
                                                                               6))
        return conf_int_stat1, conf_int_stat2, conf_int_ratio

    else:
        return conf_int_stat1


if sys.argv[1] == '-h':
    print("Boostrap the pNpS stats generated by pNpS.py to generate 95% confidence intervals ")
    print('\nusage: python pNpS.py infile.stats.txt.gz min_sites\n')
    print('\t min_sites is the minimum number 4-fold and 0-fold sites required for each gene to be included\n')
    sys.exit()


stats_dict = {}
strings = ['gene', 'gene_id', 'transcript', 'chr', 'chicken_id', 'fourfold_sfs', 'zerofold_sfs', 'fourfold_sfs_ww_ss',
           'zerofold_sfs_ww_ss']

with gzip.open(sys.argv[1], 'r') as infile:
    gene_count = 0
    for line in infile:
        col = line.rstrip().split('\t')
        if col[0] == 'gene':
            header = col[:]
            for stat in col[:]:
                stats_dict[stat] = []
            continue

        if int(col[6]) < int(sys.argv[2]) or int(col[12]) < int(sys.argv[2]):
            continue

        gene_count += 1
        for i in range(0, len(header)):
            if col[i] != 'NA' and header[i] not in strings:
                stats_dict[header[i]].append(float(col[i]))
            elif header[i] in strings:
                stats_dict[header[i]].append(col[i])
            else:
                continue

alpha = 0.05
reps = 10000

S4 = sum(stats_dict['fourfold_S'])
S0 = sum(stats_dict['zerofold_S'])

mean_pi4 = np.mean(stats_dict['pi4'])
mean_pi0 = np.mean(stats_dict['pi0'])
pi0_pi4 = mean_pi0 / mean_pi4
conf_pi0_pi4 = bootstrap(stats_dict['pi0'], reps, np.mean, alpha, stats_dict['pi4'])

mean_theta4 = np.mean(stats_dict['theta4'])
mean_theta0 = np.mean(stats_dict['theta0'])
theta0_theta4 = mean_theta0 / mean_theta4
conf_theta0_theta4 = bootstrap(stats_dict['theta0'], reps, np.mean, alpha, stats_dict['theta4'])

mean_tajD4 = np.mean(stats_dict['TajD4'])
mean_tajD0 = np.mean(stats_dict['TajD0'])
conf_TajD4 = bootstrap(stats_dict['TajD4'], reps, np.mean, alpha)
conf_TajD0 = bootstrap(stats_dict['TajD0'], reps, np.mean, alpha)

mean_delta_pi4 = np.mean(stats_dict['delta_pi4'])
mean_delta_pi0 = np.mean(stats_dict['delta_pi0'])
conf_delta_pi4 = bootstrap(stats_dict['delta_pi4'], reps, np.mean, alpha)
conf_delta_pi0 = bootstrap(stats_dict['delta_pi0'], reps, np.mean, alpha)

print(' ', 'Method: Mean across genes', sep='\t')
print(' ', sys.argv[3], sep='\t')
print('gene_count', gene_count, sep='\t')
print('S0', int(S0), sep='\t')
print('S4', int(S4), sep='\t')
print('mean_pi0', str(round(mean_pi0, 6)) + ' ' + str(conf_pi0_pi4[0]), sep='\t')
print('mean_pi4', str(round(mean_pi4, 6)) + ' ' + str(conf_pi0_pi4[1]), sep='\t')
print('mean_pi0/mean_pi4', str(round(pi0_pi4, 6)) + ' ' + str(conf_pi0_pi4[2]), sep='\t')
print('mean_theta0', str(round(mean_theta0, 6)) + ' ' + str(conf_theta0_theta4[0]), sep='\t')
print('mean_theta4', str(round(mean_theta4, 6)) + ' ' + str(conf_theta0_theta4[1]), sep='\t')
print('mean_theta0/mean_theta4', str(round(theta0_theta4, 6)) + ' ' + str(conf_theta0_theta4[2]), sep='\t')
print('mean_tajD0',  str(round(mean_tajD0, 6)) + ' ' + str(conf_TajD0), sep='\t')
print('mean_tajD4',  str(round(mean_tajD4, 6)) + ' ' + str(conf_TajD4), sep='\t')
print('mean_delta_pi0', str(round(mean_delta_pi0, 6)) + ' ' + str(conf_delta_pi0) ,sep='\t')
print('mean_delta_pi4',  str(round(mean_delta_pi4, 6)) + ' ' + str(conf_delta_pi4), sep='\t')



def bootstrap_sfs(fourfold_sfs, zerofold_sfs, fourfold_ww_ss_sfs, zerofold_ww_ss_sfs,  num_samples, alpha):
    """Returns bootstrap estimate of 100.0*(1-alpha) CI for statistic."""

    n = len(fourfold_sfs)
    fourfold_sfs_array = np.array(fourfold_sfs)
    zerofold_sfs_array = np.array(zerofold_sfs)
    fourfold_sfs_ww_ss_array = np.array(fourfold_ww_ss_sfs)
    zerofold_sfs_ww_ss_array = np.array(zerofold_ww_ss_sfs)

    idx = np.random.randint(0, n, (num_samples, n))

    fourfold_reps = fourfold_sfs_array[idx]
    zerofold_reps = zerofold_sfs_array[idx]
    fourfold_reps_ww_ss = fourfold_sfs_ww_ss_array[idx]
    zerofold_reps_ww_ss = zerofold_sfs_ww_ss_array[idx]

    fourfold_sfs_pi = []
    zerofold_sfs_pi = []
    fourfold_sfs_ww_ss_pi = []
    zerofold_sfs_ww_ss_pi = []

    fourfold_sfs_thetaw = []
    zerofold_sfs_thetaw = []
    fourfold_sfs_ww_ss_thetaw = []
    zerofold_sfs_ww_ss_thetaw = []

    fourfold_sfs_tajd = []
    zerofold_sfs_tajd = []
    fourfold_sfs_ww_ss_tajd = []
    zerofold_sfs_ww_ss_tajd = []

    fourfold_sfs_delta_pi = []
    zerofold_sfs_delta_pi = []
    fourfold_sfs_ww_ss_delta_pi = []
    zerofold_sfs_ww_ss_delta_pi = []

    for i, j, k, l in zip(fourfold_reps, zerofold_reps, fourfold_reps_ww_ss, zerofold_reps_ww_ss):

        total_fourfold_sfs = np.sum(i, axis=0)
        total_zerofold_sfs = np.sum(j, axis=0)
        total_fourfold_sfs_ww_ss = np.sum(k, axis=0)
        total_zerofold_sfs_ww_ss = np.sum(l, axis=0)

        rep_stats = calc_polystats(total_fourfold_sfs, total_zerofold_sfs, total_fourfold_sfs_ww_ss,
                                   total_zerofold_sfs_ww_ss)

        zerofold_sfs_pi.append(rep_stats[2])
        fourfold_sfs_pi.append(rep_stats[3])
        zerofold_sfs_ww_ss_pi.append(rep_stats[10])
        fourfold_sfs_ww_ss_pi.append(rep_stats[11])

        zerofold_sfs_thetaw.append(rep_stats[4])
        fourfold_sfs_thetaw.append(rep_stats[5])
        zerofold_sfs_ww_ss_thetaw.append(rep_stats[12])
        fourfold_sfs_ww_ss_thetaw.append(rep_stats[13])

        zerofold_sfs_tajd.append(rep_stats[6])
        fourfold_sfs_tajd.append(rep_stats[7])
        zerofold_sfs_ww_ss_tajd.append(rep_stats[14])
        fourfold_sfs_ww_ss_tajd.append(rep_stats[15])

        zerofold_sfs_delta_pi.append(rep_stats[16])
        fourfold_sfs_delta_pi.append(rep_stats[17])
        zerofold_sfs_ww_ss_delta_pi.append(rep_stats[18])
        fourfold_sfs_ww_ss_delta_pi.append(rep_stats[19])

    zerofold_sfs_pi.sort()
    fourfold_sfs_pi.sort()
    zerofold_sfs_ww_ss_pi.sort()
    fourfold_sfs_ww_ss_pi.sort()

    conf_int_zerofold_sfs_pi = (round(zerofold_sfs_pi[int((alpha / 2.0)*num_samples)], 6),
                      round(zerofold_sfs_pi[int((1 - alpha / 2.0)*num_samples)], 6))
    conf_int_fourfold_sfs_pi = (round(fourfold_sfs_pi[int((alpha / 2.0) * num_samples)], 6),
                      round(fourfold_sfs_pi[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_zerofold_sfs_ww_ss_pi = (round(zerofold_sfs_ww_ss_pi[int((alpha / 2.0)*num_samples)], 6),
                      round(zerofold_sfs_ww_ss_pi[int((1 - alpha / 2.0)*num_samples)], 6))
    conf_int_fourfold_sfs_ww_ss_pi = (round(fourfold_sfs_ww_ss_pi[int((alpha / 2.0)*num_samples)], 6),
                      round(fourfold_sfs_ww_ss_pi[int((1 - alpha / 2.0)*num_samples)], 6))

    zerofold_sfs_thetaw.sort()
    fourfold_sfs_thetaw.sort()
    zerofold_sfs_ww_ss_thetaw.sort()
    fourfold_sfs_ww_ss_thetaw.sort()

    conf_int_zerofold_sfs_thetaw = (round(zerofold_sfs_thetaw[int((alpha / 2.0) * num_samples)], 6),
                                round(zerofold_sfs_thetaw[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_fourfold_sfs_thetaw = (round(fourfold_sfs_thetaw[int((alpha / 2.0) * num_samples)], 6),
                            round(fourfold_sfs_thetaw[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_zerofold_sfs_ww_ss_thetaw = (round(zerofold_sfs_ww_ss_thetaw[int((alpha / 2.0) * num_samples)], 6),
                                  round(zerofold_sfs_ww_ss_thetaw[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_fourfold_sfs_ww_ss_thetaw = (round(fourfold_sfs_ww_ss_thetaw[int((alpha / 2.0) * num_samples)], 6),
                                  round(fourfold_sfs_ww_ss_thetaw[int((1 - alpha / 2.0) * num_samples)], 6))

    zerofold_sfs_tajd.sort()
    fourfold_sfs_tajd.sort()
    zerofold_sfs_ww_ss_tajd.sort()
    fourfold_sfs_ww_ss_tajd.sort()

    conf_int_zerofold_sfs_tajd = (round(zerofold_sfs_tajd [int((alpha / 2.0) * num_samples)], 6),
                                    round(zerofold_sfs_tajd [int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_fourfold_sfs_tajd = (round(fourfold_sfs_tajd [int((alpha / 2.0) * num_samples)], 6),
                                round(fourfold_sfs_tajd[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_zerofold_sfs_ww_ss_tajd = (round(zerofold_sfs_ww_ss_tajd [int((alpha / 2.0) * num_samples)], 6),
                                      round(zerofold_sfs_ww_ss_tajd [int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_fourfold_sfs_ww_ss_tajd = (round(fourfold_sfs_ww_ss_tajd [int((alpha / 2.0) * num_samples)], 6),
                                      round(fourfold_sfs_ww_ss_tajd [int((1 - alpha / 2.0) * num_samples)], 6))

    zerofold_sfs_delta_pi.sort()
    fourfold_sfs_delta_pi.sort()
    zerofold_sfs_ww_ss_delta_pi.sort()
    fourfold_sfs_ww_ss_delta_pi.sort()

    conf_int_zerofold_sfs_delta_pi = (round(zerofold_sfs_delta_pi[int((alpha / 2.0) * num_samples)], 6),
                                  round(zerofold_sfs_delta_pi[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_fourfold_sfs_delta_pi = (round(fourfold_sfs_delta_pi[int((alpha / 2.0) * num_samples)], 6),
                                  round(fourfold_sfs_delta_pi[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_zerofold_sfs_ww_ss_delta_pi = (round(zerofold_sfs_ww_ss_delta_pi[int((alpha / 2.0) * num_samples)], 6),
                                        round(zerofold_sfs_ww_ss_delta_pi[int((1 - alpha / 2.0) * num_samples)], 6))
    conf_int_fourfold_sfs_ww_ss_delta_pi = (round(fourfold_sfs_ww_ss_delta_pi[int((alpha / 2.0) * num_samples)], 6),
                                        round(fourfold_sfs_ww_ss_delta_pi[int((1 - alpha / 2.0) * num_samples)], 6))


    return conf_int_zerofold_sfs_pi, conf_int_fourfold_sfs_pi, conf_int_zerofold_sfs_ww_ss_pi, \
           conf_int_fourfold_sfs_ww_ss_pi, conf_int_zerofold_sfs_thetaw, conf_int_fourfold_sfs_thetaw, \
           conf_int_zerofold_sfs_ww_ss_thetaw, conf_int_fourfold_sfs_ww_ss_thetaw, conf_int_zerofold_sfs_tajd, \
           conf_int_fourfold_sfs_tajd, conf_int_zerofold_sfs_ww_ss_tajd, conf_int_fourfold_sfs_ww_ss_tajd, \
           conf_int_zerofold_sfs_delta_pi, conf_int_fourfold_sfs_delta_pi, conf_int_zerofold_sfs_ww_ss_delta_pi, \
           conf_int_fourfold_sfs_ww_ss_delta_pi


def calc_polystats(total_fourfold_sfs, total_zerofold_sfs, total_fourfold_sfs_ww_ss, total_zerofold_sfs_ww_ss):

    n = len(total_fourfold_sfs[1:]) * 2

    total_fourfold_sites = sum(total_fourfold_sfs)
    total_zerofold_sites = sum(total_zerofold_sfs)
    total_fourfold_sites_ww_ss = sum(total_fourfold_sfs_ww_ss)
    total_zerofold_sites_ww_ss = sum(total_zerofold_sfs_ww_ss)

    S4_total = sum(total_fourfold_sfs[1:])
    S0_total = sum(total_zerofold_sfs[1:])
    S4_ww_ss_total = sum(total_fourfold_sfs_ww_ss[1:])
    S0_ww_ss_total = sum(total_zerofold_sfs_ww_ss[1:])

    pi4_total = pg.pi_sfs(total_fourfold_sfs[1:])
    pi0_total = pg.pi_sfs(total_zerofold_sfs[1:])
    pi4_total_site = pi4_total / float(total_fourfold_sites)
    pi0_total_site = pi0_total / float(total_zerofold_sites)

    pi4_ww_ss_total = pg.pi_sfs(total_fourfold_sfs_ww_ss[1:])
    pi0_ww_ss_total = pg.pi_sfs(total_zerofold_sfs_ww_ss[1:])
    pi4_ww_ss_total_site = pi4_ww_ss_total / float(total_fourfold_sites_ww_ss)
    pi0_ww_ss_total_site = pi0_ww_ss_total / float(total_zerofold_sites_ww_ss)

    thetaW4_total = pg.thetaW(n, sum(total_fourfold_sfs[1:]))
    thetaW0_total = pg.thetaW(n, sum(total_zerofold_sfs[1:]))
    thetaW4_total_site = thetaW4_total / float(total_fourfold_sites)
    thetaW0_total_site = thetaW0_total / float(total_zerofold_sites)

    thetaW4_ww_ss_total = pg.thetaW(n, sum(total_fourfold_sfs_ww_ss[1:]))
    thetaW0_ww_ss_total = pg.thetaW(n, sum(total_zerofold_sfs_ww_ss[1:]))
    thetaW4_ww_ss_total_site = thetaW4_ww_ss_total / float(total_fourfold_sites_ww_ss)
    thetaW0_ww_ss_total_site = thetaW0_ww_ss_total / float(total_zerofold_sites_ww_ss)

    tajD4_total = round(pg.TajimasD(n, S4_total, thetaW4_total, pi4_total), 5)
    tajD0_total = round(pg.TajimasD(n, S0_total, thetaW0_total, pi0_total), 5)
    tajD4_ww_ss_total = round(pg.TajimasD(n, S4_ww_ss_total, thetaW4_ww_ss_total, pi4_ww_ss_total), 5)
    tajD0_ww_ss_total = round(pg.TajimasD(n, S0_ww_ss_total, thetaW0_ww_ss_total, pi0_ww_ss_total), 5)

    delta_pi4_total = pg.calc_delta_pi(S4_total, pi4_total, n)
    delta_pi0_total = pg.calc_delta_pi(S0_total, pi0_total, n)
    delta_pi4_ww_ss_total = pg.calc_delta_pi(S4_ww_ss_total, pi4_ww_ss_total, n)
    delta_pi0_ww_ss_total = pg.calc_delta_pi(S0_ww_ss_total, pi0_ww_ss_total, n)


    return S0_total, S4_total, pi0_total_site, pi4_total_site, thetaW0_total_site, thetaW4_total_site, tajD0_total, \
           tajD4_total, S0_ww_ss_total, S4_ww_ss_total, pi0_ww_ss_total_site, pi4_ww_ss_total_site, \
           thetaW0_ww_ss_total_site, thetaW4_ww_ss_total_site, tajD0_ww_ss_total, tajD4_ww_ss_total, delta_pi0_total,\
           delta_pi4_total,  delta_pi0_ww_ss_total, delta_pi4_ww_ss_total


with gzip.open(sys.argv[1], 'r') as infile:

    line_num = 1
    total_gene_count = 0
    fourfold_sfs_list = []
    zerofold_sfs_list = []
    fourfold_sfs_ww_ss_list = []
    zerofold_sfs_ww_ss_list = []

    for line in infile:
        col = line.rstrip().split('\t')
        if col[0] == 'gene':
            continue

        if line_num == 1:
            total_fourfold_sfs = [int(i) for i in col[20].split(',')]
            total_zerofold_sfs = [int(i) for i in col[21].split(',')]
            total_fourfold_sfs_ww_ss = [int(i) for i in col[36].split(',')]
            total_zerofold_sfs_ww_ss = [int(i) for i in col[37].split(',')]

            fourfold_sfs_list.append(total_fourfold_sfs)
            zerofold_sfs_list.append(total_zerofold_sfs)
            fourfold_sfs_ww_ss_list.append(total_fourfold_sfs_ww_ss)
            zerofold_sfs_ww_ss_list.append(total_zerofold_sfs_ww_ss)

            line_num += 1
        else:
            fourfold_sfs = [int(i) for i in col[20].split(',')]
            zerofold_sfs = [int(i) for i in col[21].split(',')]
            fourfold_sfs_ww_ss = [int(i) for i in col[36].split(',')]
            zerofold_sfs_ww_ss = [int(i) for i in col[37].split(',')]

            fourfold_sfs_list.append(fourfold_sfs)
            zerofold_sfs_list.append(zerofold_sfs)
            fourfold_sfs_ww_ss_list.append(fourfold_sfs_ww_ss)
            zerofold_sfs_ww_ss_list.append(zerofold_sfs_ww_ss)

            total_fourfold_sfs = [x + y for x, y in zip(total_fourfold_sfs, fourfold_sfs)]
            total_zerofold_sfs = [x + y for x, y in zip(total_zerofold_sfs, zerofold_sfs)]
            total_fourfold_sfs_ww_ss = [x + y for x, y in zip(total_fourfold_sfs_ww_ss, fourfold_sfs_ww_ss)]
            total_zerofold_sfs_ww_ss = [x + y for x, y in zip(total_zerofold_sfs_ww_ss, zerofold_sfs_ww_ss)]

        total_gene_count += 1


pol_sfs = calc_polystats(total_fourfold_sfs, total_zerofold_sfs, total_fourfold_sfs_ww_ss, total_zerofold_sfs_ww_ss)
boot_conf_int = bootstrap_sfs(fourfold_sfs_list, zerofold_sfs_list, fourfold_sfs_ww_ss_list, zerofold_sfs_ww_ss_list,
                              reps, alpha)
print('')
print(' ', 'Method: Summed sfs', sep='\t')
print(' ', sys.argv[3], sep='\t')
print('gene_count', total_gene_count, sep='\t')
print('S0', pol_sfs[0], sep='\t')
print('S4', pol_sfs[1], sep='\t')
print('pi0', str(round(pol_sfs[2], 6)) + ' ' + str(boot_conf_int[0]), sep='\t')
print('pi4', str(round(pol_sfs[3], 6)) + ' (' + str(boot_conf_int[1]), sep='\t')
print('pi0/pi4', str(round(pol_sfs[2] / pol_sfs[3], 6)) + ' ('
      + str(round(boot_conf_int[0][0] / boot_conf_int[1][0], 6))
      + ', ' + str(round(boot_conf_int[0][1] / boot_conf_int[1][1], 6)) + ')', sep='\t')
print('theta0', str(round(pol_sfs[4], 6)) + ' ' + str(boot_conf_int[4]),  sep='\t')
print('theta4', str(round(pol_sfs[5], 6)) + ' ' + str(boot_conf_int[5]), sep='\t')
print('theta0/theta4', str(round(pol_sfs[4] / pol_sfs[5], 6)) + ' ('
      + str(round(boot_conf_int[4][0] / boot_conf_int[5][0], 6))
      + ', ' + str(round(boot_conf_int[4][1] / boot_conf_int[5][1], 6)) + ')', sep='\t')
print('tajD0',  str(round(pol_sfs[6], 6)) + ' (' + str(boot_conf_int[8]), sep='\t')
print('tajD4',  str(round(pol_sfs[7], 6)) + ' (' + str(boot_conf_int[9]), sep='\t')
print('delta_pi0', str(round(pol_sfs[16], 6)) + ' ' + str(boot_conf_int[12]),sep='\t')
print('delta_pi4',  str(round(pol_sfs[17], 6)) + ' ' + str(boot_conf_int[13]), sep='\t')

# ww ss stats

S4 = sum(stats_dict['fourfold_S_ww_ss'])
S0 = sum(stats_dict['zerofold_S_ww_ss'])

mean_pi4 = np.mean(stats_dict['pi4_ww_ss'])
mean_pi0 = np.mean(stats_dict['pi0_ww_ss'])
pi0_pi4 = mean_pi0 / mean_pi4
conf_pi0_pi4 = bootstrap(stats_dict['pi0_ww_ss'], reps, np.mean, alpha, stats_dict['pi4_ww_ss'])

mean_theta4 = np.mean(stats_dict['theta4_ww_ss'])
mean_theta0 = np.mean(stats_dict['theta0_ww_ss'])
theta0_theta4 = mean_theta0 / mean_theta4
conf_theta0_theta4 = bootstrap(stats_dict['theta0_ww_ss'], reps, np.mean, alpha, stats_dict['theta4_ww_ss'])

mean_tajD4 = np.mean(stats_dict['TajD4_ww_ss'])
mean_tajD0 = np.mean(stats_dict['TajD0_ww_ss'])
conf_TajD4 = bootstrap(stats_dict['TajD4_ww_ss'], reps, np.mean, alpha)
conf_TajD0 = bootstrap(stats_dict['TajD0_ww_ss'], reps, np.mean, alpha)

mean_delta_pi4 = np.mean(stats_dict['delta_pi4_ww_ss'])
mean_delta_pi0 = np.mean(stats_dict['delta_pi0_ww_ss'])
conf_delta_pi4 = bootstrap(stats_dict['delta_pi4_ww_ss'], reps, np.mean, alpha)
conf_delta_pi0 = bootstrap(stats_dict['delta_pi0_ww_ss'], reps, np.mean, alpha)

print('WW and SS')
print(' ', 'Method: Mean across genes', sep='\t')
print(' ', sys.argv[3], sep='\t')
print('gene_count', gene_count, sep='\t')
print('S0_ww_ss', int(S0), sep='\t')
print('S4_ww_ss', int(S4), sep='\t')
print('mean_pi0_ww_ss', str(round(mean_pi0, 6)) + ' ' + str(conf_pi0_pi4[0]), sep='\t')
print('mean_pi4_ww_ss', str(round(mean_pi4, 6)) + ' ' + str(conf_pi0_pi4[1]), sep='\t')
print('mean_pi0_ww_ss/mean_pi4_ww_ss', str(round(pi0_pi4, 6)) + ' ' + str(conf_pi0_pi4[2]), sep='\t')
print('mean_theta0_ww_ss', str(round(mean_theta0, 6)) + ' ' + str(conf_theta0_theta4[0]), sep='\t')
print('mean_theta4_ww_ss', str(round(mean_theta4, 6)) + ' ' + str(conf_theta0_theta4[1]), sep='\t')
print('mean_theta0_ww_ss/mean_theta4_ww_ss', str(round(theta0_theta4, 6)) + ' ' + str(conf_theta0_theta4[2]), sep='\t')
print('mean_tajD0_ww_ss',  str(round(mean_tajD0, 6)) + ' ' + str(conf_TajD0), sep='\t')
print('mean_tajD4_ww_ss',  str(round(mean_tajD4, 6)) + ' ' + str(conf_TajD4), sep='\t')
print('mean_delta_pi0_ww_ss', str(round(mean_delta_pi0, 6)) + ' ' + str(conf_delta_pi0) ,sep='\t')
print('mean_delta_pi4_ww_ss',  str(round(mean_delta_pi4, 6)) + ' ' + str(conf_delta_pi4), sep='\t')


print('')
print(' ', 'Method: Summed sfs', sep='\t')
print(' ', sys.argv[3], sep='\t')
print('gene_count', total_gene_count, sep='\t')
print('S0_ww_ss', pol_sfs[8], sep='\t')
print('S4_ww_ss', pol_sfs[9], sep='\t')
print('pi0_ww_ss', str(round(pol_sfs[10], 6)) + ' ' + str(boot_conf_int[2]), sep='\t')
print('pi4_ww_ss', str(round(pol_sfs[11], 6)) + ' (' + str(boot_conf_int[3]), sep='\t')
print('pi0_ww_ss/pi4_ww_ss', str(round(pol_sfs[10] / pol_sfs[11], 6)) + ' ('
      + str(round(boot_conf_int[2][0] / boot_conf_int[3][0], 6))
      + ', ' + str(round(boot_conf_int[2][1] / boot_conf_int[3][1], 6)) + ')', sep='\t')
print('theta0_ww_ss', str(round(pol_sfs[12], 6)) + ' ' + str(boot_conf_int[6]),  sep='\t')
print('theta4_ww_ss', str(round(pol_sfs[13], 6)) + ' ' + str(boot_conf_int[7]), sep='\t')
print('theta0_ww_ss/theta4_ww_ss', str(round(pol_sfs[12] / pol_sfs[13], 6)) + ' ('
      + str(round(boot_conf_int[6][0] / boot_conf_int[7][0], 6))
      + ', ' + str(round(boot_conf_int[6][1] / boot_conf_int[7][1], 6)) + ')', sep='\t')
print('tajD0_ww_ss',  str(round(pol_sfs[14], 6)) + ' (' + str(boot_conf_int[10]), sep='\t')
print('tajD4_ww_ss',  str(round(pol_sfs[15], 6)) + ' (' + str(boot_conf_int[11]), sep='\t')
print('delta_pi0_ww_ss', str(round(pol_sfs[18], 6)) + ' ' + str(boot_conf_int[14]) ,sep='\t')
print('delta_pi4_ww_ss',  str(round(pol_sfs[19], 6)) + ' ' + str(boot_conf_int[15]), sep='\t')